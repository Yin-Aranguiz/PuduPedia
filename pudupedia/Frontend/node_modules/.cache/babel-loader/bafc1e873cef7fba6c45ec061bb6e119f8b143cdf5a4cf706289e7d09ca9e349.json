{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bianc\\\\curso.python\\\\pudupediaProyecto\\\\pudupedia\\\\Frontend\\\\src\\\\components\\\\GamePage\\\\MemoPudu\\\\Memopudu.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport './memopudu.css';\nimport imgExample from './nebula.jpeg';\nimport img2Example from './animalito.jpg';\nimport img3Example from './Chucao.jpg';\nimport img4Example from './Guiña.jpg';\nimport img5Example from './PuduComiendo.jpg';\nimport img6Example from './pumaRuge.jpg';\nimport img7Example from './zorrito.jpg';\nimport img8Example from './PuduReading.jpg';\nimport img9Example from './hierba.jpg';\nimport img10Example from './pescador.jpg';\nimport img11Example from './pequen.jpg';\nimport img12Example from './bosque.jpg';\nimport img13Example from './chincol.jpg';\nimport img14Example from './pudu.jpg';\nimport img15Example from './puma.jpg';\nimport musicGame from './memoPuduMusic.mp3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Memopudu = () => {\n  _s();\n  const [time, setTime] = useState(60);\n  const intervalRef = useRef(null);\n  const [lockBoard, setLockBoard] = useState(true);\n  const [firstCard, setFirstCard] = useState(null);\n  const [matchedCards, setMatchedCards] = useState([]);\n  const [animalImages, setAnimalImages] = useState([]);\n  const [actualDifficulty, setactualDifficulty] = useState(12); // Nivel fácil por defecto\n  const [gameStarted, setGameStarted] = useState(false);\n  const tableroRef = useRef(null);\n  const audioRef = useRef(null);\n  const musicButtonRef = useRef(null);\n  const animales = [imgExample, img2Example, img3Example, img4Example, img5Example, img6Example, img7Example, img8Example, img9Example, img10Example, img11Example, img12Example, img13Example, img14Example, img15Example];\n  // Para depuración\n  useEffect(() => {\n    console.log('Memopudu component mounted');\n  }, []);\n\n  // Función para barajar las cartas\n  const shuffle = array => {\n    let currentIndex = array.length,\n      randomIndex;\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n      [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n    }\n    return array;\n  };\n\n  // Función para reproducir la música de fondo\n  const playMusic = () => {\n    if (audioRef.current.paused) {\n      audioRef.current.play();\n      musicButtonRef.current.textContent = 'Parar Sonido';\n    }\n  };\n  // Función para parar la música de fondo\n  const stopMusic = () => {\n    if (!audioRef.current.paused) {\n      audioRef.current.pause();\n      audioRef.current.currentTime = 0;\n      musicButtonRef.current.textContent = 'Reproducir Sonido';\n    }\n  };\n  // Función para el click del botón que maneja la música\n  const handleMusicButtonClick = () => {\n    if (audioRef.current.paused) {\n      playMusic();\n    } else {\n      stopMusic();\n    }\n  };\n  // Función para reconocer si el audio está corriendo al cargar la página o no\n  useEffect(() => {\n    if (audioRef.current) {\n      audioRef.current.loop = true; // Activar el bucle infinito\n      audioRef.current.play().catch(error => {\n        console.error(\"Error playing audio:\", error);\n      });\n    }\n    return () => {\n      if (audioRef.current) {\n        audioRef.current.pause();\n      }\n    };\n  }, []);\n\n  // Función para comenzar el contador del tiempo\n  const startCounter = () => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n    intervalRef.current = setInterval(() => {\n      setTime(prev => {\n        const newTime = prev - 1;\n        console.log('newTime:', newTime);\n        if (newTime === 0) {\n          clearInterval(intervalRef.current);\n          intervalRef.current = null;\n          showResult('fin-malo');\n          return 0;\n        }\n        updateCounter(newTime);\n        return newTime;\n      });\n    }, 1000);\n    console.log('Interval ID:', intervalRef.current);\n  };\n\n  // Función para actualizar el texto del contador en pantalla\n  const updateCounter = time => {\n    console.log('Updating counter with time:', time);\n    const tiempoElement = document.getElementById('tiempo');\n    if (!tiempoElement) {\n      console.error(\"El elemento con el ID 'tiempo' no existe en el DOM\");\n      return;\n    }\n    const minutes = Math.floor(time / 60);\n    const seconds = time % 60;\n    const formatSeconds = seconds < 10 ? `0${seconds}` : seconds;\n    tiempoElement.textContent = `Tiempo: ${minutes < 10 ? `0${minutes}` : minutes}:${formatSeconds}`;\n  };\n\n  // Función para detener el contador\n  const stopCounter = () => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n    setTime(60);\n    updateCounter(60);\n  };\n\n  // Función para manejar cómo se muestran los resultados\n  const showResult = state => {\n    const result = document.getElementById('resultado');\n    switch (state) {\n      // case 'inicio':\n      //     result.classList.remove('hidden');\n      //     result.textContent = '¡COMIENZA EL JUEGO!';\n      //     setLockBoard(false);\n      //     setTimeout(() => {\n      //         result.classList.add('hidden');\n      //     }, 1000);\n      // break;\n      case 'fin-bueno':\n        setLockBoard(true);\n        clearInterval(intervalRef.current);\n        result.classList.remove('hidden');\n        result.classList.add('animate');\n        result.textContent = '¡GANASTE!';\n        setTimeout(() => {\n          result.classList.add('hidden');\n          result.classList.remove('animate');\n        }, 1000);\n        break;\n      case 'fin-malo':\n        setLockBoard(true);\n        result.classList.remove('hidden');\n        result.classList.add('animate');\n        result.textContent = '¡PERDISTE!';\n        setTimeout(() => {\n          result.classList.add('hidden');\n          result.classList.remove('animate');\n        }, 1000);\n        break;\n      default:\n        break;\n    }\n  };\n  // Función para añadir la animación a los resultados\n  const animationWin = () => {\n    const result = document.getElementById('resultado');\n    result.classList.add('animacionWin');\n  };\n\n  // Función que maneja lo que sucede al hacer click en una casilla\n  const handleCardClick = e => {\n    if (lockBoard || !gameStarted) return;\n    const card = e.currentTarget;\n    const cardImage = card.querySelector('img');\n\n    // Prevenir que se seleccione la misma carta o una que ya está emparejada\n    if (card === firstCard || card.classList.contains('matched')) return;\n    setTimeout(() => {\n      cardImage.classList.remove('hidden');\n      card.classList.add('flipped');\n    }, 600);\n    if (!firstCard) {\n      setFirstCard(card); // Selecciona la primera carta\n    } else {\n      const secondCard = card;\n      setLockBoard(true); // Bloquea el tablero al seleccionar la segunda carta\n\n      if (firstCard.dataset.animal === secondCard.dataset.animal) {\n        // Si las cartas coinciden\n        firstCard.classList.add('matched');\n        secondCard.classList.add('matched');\n        setMatchedCards(prev => [...prev, firstCard, secondCard]);\n        resetCards();\n        setLockBoard(false); // Desbloquea el tablero después de encontrar un par\n\n        if (matchedCards.length + 2 === actualDifficulty) {\n          setTimeout(() => {\n            showResult('fin-bueno');\n            animationWin();\n            setLockBoard(false);\n          }, 300);\n        }\n      } else {\n        // Si las cartas no coinciden, se ocultan\n        setTimeout(() => {\n          firstCard.classList.remove('flipped');\n          secondCard.classList.remove('flipped');\n          firstCard.querySelector('img').classList.add('hidden');\n          secondCard.querySelector('img').classList.add('hidden');\n          resetCards();\n          setLockBoard(false); // Desbloquea el tablero después de ocultar las cartas\n        }, 500); // Tiempo para que el jugador vea las dos cartas antes de ocultarlas\n      }\n    }\n  };\n\n  // Función para resetear las casillas a su posición original (no mostrar imágenes)\n  const resetCards = () => {\n    setFirstCard(null);\n    setLockBoard(false);\n  };\n  // Función para manejar los botones de dificultad\n  const handleDifficultyClick = difficulty => {\n    resetBoard(difficulty);\n    updateCounter(60);\n  };\n  // Función para manejar cómo se muestran las imágenes según la dificultad\n  const generateAnimalImages = difficulty => {\n    const pairs = animales.slice(0, Math.ceil(difficulty / 2));\n    const images = [...pairs, ...pairs.slice(0, difficulty - pairs.length)];\n    return shuffle(images);\n  };\n  // Función para resetear el tablero\n  const resetBoard = difficulty => {\n    stopCounter();\n    setactualDifficulty(difficulty);\n    setAnimalImages(generateAnimalImages(difficulty));\n    setLockBoard(true);\n    setGameStarted(false);\n    setMatchedCards([]);\n    document.getElementById('resultado').textContent = '';\n    document.getElementById('resultado').classList.add('hidden');\n    const cards = document.querySelectorAll('.card');\n    cards.forEach(card => {\n      card.classList.remove('flipped', 'matched');\n      const img = card.querySelector('img');\n      if (img) {\n        img.classList.add('hidden');\n      }\n    });\n  };\n  // Función para comenzar el juego\n  const startGame = () => {\n    console.log('Starting game...');\n    if (animalImages.length === 0) {\n      console.log('No animal images available.');\n      return;\n    }\n    console.log('Animal images available:', animalImages);\n    setGameStarted(true);\n    startCounter();\n    showResult('inicio');\n    setLockBoard(false);\n    resetCards();\n  };\n  // Función para cancelar el juego\n  const cancelGame = () => {\n    if (intervalRef) {\n      clearInterval(intervalRef);\n      setInterval(null);\n    }\n    setTime(60);\n    updateCounter(60);\n    setLockBoard(true);\n    setGameStarted(false);\n    const resultElement = document.getElementById('resultado');\n    if (resultElement) {\n      resultElement.textContent = '';\n      resultElement.classList.add('hidden');\n    }\n    resetCards();\n    resetBoard(actualDifficulty);\n  };\n  // Función para generar nuevas imágenes de animales según la dificultad\n  useEffect(() => {\n    setAnimalImages(generateAnimalImages(actualDifficulty));\n  }, [actualDifficulty]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"memopudu\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Memopud\\xFA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      id: \"tiempo\",\n      children: \"Tiempo: 01:00\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"description\",\n      children: \"\\xA1Encuentra todos los pares antes de que pase 1 minuto!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleMusicButtonClick,\n        ref: musicButtonRef,\n        children: \"Parar Sonido\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"difficulty-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDifficultyClick(12),\n          children: \"F\\xE1cil\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDifficultyClick(18),\n          children: \"Medio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDifficultyClick(24),\n          children: \"Dif\\xEDcil\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startGame,\n        disabled: gameStarted,\n        children: \"Iniciar Juego\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: cancelGame,\n        children: \"Cancelar Juego\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `board ${actualDifficulty === 12 ? 'easy' : actualDifficulty === 18 ? 'medium' : 'hard'}`,\n      ref: tableroRef,\n      children: animalImages.map((animal, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `card ${lockBoard ? 'lock' : ''}`,\n        \"data-animal\": animal,\n        onClick: handleCardClick,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-inner\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-front\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-back\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: animal,\n              alt: \"animal\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"resultado\",\n      className: \"hidden\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      src: musicGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 328,\n    columnNumber: 9\n  }, this);\n};\n_s(Memopudu, \"WX4eFkt6wmx/39lqbCv5uJOHaXo=\");\n_c = Memopudu;\nexport default Memopudu;\nvar _c;\n$RefreshReg$(_c, \"Memopudu\");","map":{"version":3,"names":["React","useEffect","useState","useRef","imgExample","img2Example","img3Example","img4Example","img5Example","img6Example","img7Example","img8Example","img9Example","img10Example","img11Example","img12Example","img13Example","img14Example","img15Example","musicGame","jsxDEV","_jsxDEV","Memopudu","_s","time","setTime","intervalRef","lockBoard","setLockBoard","firstCard","setFirstCard","matchedCards","setMatchedCards","animalImages","setAnimalImages","actualDifficulty","setactualDifficulty","gameStarted","setGameStarted","tableroRef","audioRef","musicButtonRef","animales","console","log","shuffle","array","currentIndex","length","randomIndex","Math","floor","random","playMusic","current","paused","play","textContent","stopMusic","pause","currentTime","handleMusicButtonClick","loop","catch","error","startCounter","clearInterval","setInterval","prev","newTime","showResult","updateCounter","tiempoElement","document","getElementById","minutes","seconds","formatSeconds","stopCounter","state","result","classList","remove","add","setTimeout","animationWin","handleCardClick","e","card","currentTarget","cardImage","querySelector","contains","secondCard","dataset","animal","resetCards","handleDifficultyClick","difficulty","resetBoard","generateAnimalImages","pairs","slice","ceil","images","cards","querySelectorAll","forEach","img","startGame","cancelGame","resultElement","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","onClick","ref","disabled","map","index","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/bianc/curso.python/pudupediaProyecto/pudupedia/Frontend/src/components/GamePage/MemoPudu/Memopudu.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport './memopudu.css';\r\nimport imgExample from './nebula.jpeg';\r\nimport img2Example from './animalito.jpg';\r\nimport img3Example from './Chucao.jpg';\r\nimport img4Example from './Guiña.jpg';\r\nimport img5Example from './PuduComiendo.jpg';\r\nimport img6Example from './pumaRuge.jpg';\r\nimport img7Example from './zorrito.jpg';\r\nimport img8Example from './PuduReading.jpg';\r\nimport img9Example from './hierba.jpg';\r\nimport img10Example from './pescador.jpg';\r\nimport img11Example from './pequen.jpg';\r\nimport img12Example from './bosque.jpg';\r\nimport img13Example from './chincol.jpg';\r\nimport img14Example from './pudu.jpg';\r\nimport img15Example from './puma.jpg';\r\nimport musicGame from './memoPuduMusic.mp3';\r\n\r\nconst Memopudu = () => {\r\n    const [time, setTime] = useState(60);\r\n    const intervalRef = useRef(null);\r\n    const [lockBoard, setLockBoard] = useState(true);\r\n    const [firstCard, setFirstCard] = useState(null);\r\n    const [matchedCards, setMatchedCards] = useState([]);\r\n    const [animalImages, setAnimalImages] = useState([]);\r\n    const [actualDifficulty, setactualDifficulty] = useState(12); // Nivel fácil por defecto\r\n    const [gameStarted, setGameStarted] = useState(false);\r\n    const tableroRef = useRef(null);\r\n    const audioRef = useRef(null);\r\n    const musicButtonRef = useRef(null);\r\n\r\n    const animales = [\r\n        imgExample,\r\n        img2Example,\r\n        img3Example,\r\n        img4Example,\r\n        img5Example,\r\n        img6Example,\r\n        img7Example,\r\n        img8Example,\r\n        img9Example,\r\n        img10Example,\r\n        img11Example,\r\n        img12Example,\r\n        img13Example,\r\n        img14Example,\r\n        img15Example\r\n    ];\r\n    // Para depuración\r\n    useEffect(() => {\r\n        console.log('Memopudu component mounted');\r\n    }, []);\r\n\r\n    // Función para barajar las cartas\r\n    const shuffle = (array) => {\r\n        let currentIndex = array.length, randomIndex;\r\n\r\n        while (currentIndex !== 0) {\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex--;\r\n\r\n            [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\r\n        }\r\n\r\n        return array;\r\n    };\r\n\r\n    // Función para reproducir la música de fondo\r\n    const playMusic = () => {\r\n        if (audioRef.current.paused) {\r\n            audioRef.current.play();\r\n            musicButtonRef.current.textContent = 'Parar Sonido';\r\n        }\r\n    };\r\n    // Función para parar la música de fondo\r\n    const stopMusic = () => {\r\n        if (!audioRef.current.paused) {\r\n            audioRef.current.pause();\r\n            audioRef.current.currentTime = 0;\r\n            musicButtonRef.current.textContent = 'Reproducir Sonido';\r\n        }\r\n    };\r\n    // Función para el click del botón que maneja la música\r\n    const handleMusicButtonClick = () => {\r\n        if (audioRef.current.paused) {\r\n            playMusic();\r\n        } else {\r\n            stopMusic();\r\n        }\r\n    };\r\n    // Función para reconocer si el audio está corriendo al cargar la página o no\r\n    useEffect(() => {\r\n        if (audioRef.current) {\r\n            audioRef.current.loop = true; // Activar el bucle infinito\r\n            audioRef.current.play().catch(error => {\r\n                console.error(\"Error playing audio:\", error);\r\n            });\r\n        }\r\n        return () => {\r\n            if (audioRef.current) {\r\n                audioRef.current.pause();\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    // Función para comenzar el contador del tiempo\r\n    const startCounter = () => {\r\n        if (intervalRef.current) {\r\n            clearInterval(intervalRef.current);\r\n        }\r\n        intervalRef.current = setInterval(() => {\r\n            setTime(prev => {\r\n                const newTime = prev - 1;\r\n                console.log('newTime:', newTime);\r\n\r\n                if (newTime === 0) {\r\n                    clearInterval(intervalRef.current);\r\n                    intervalRef.current = null;\r\n                    showResult('fin-malo');\r\n                    return 0;\r\n                }\r\n\r\n                updateCounter(newTime);\r\n                return newTime;\r\n            });\r\n        }, 1000);\r\n        console.log('Interval ID:', intervalRef.current);\r\n    };\r\n\r\n    // Función para actualizar el texto del contador en pantalla\r\n    const updateCounter = (time) => {\r\n        console.log('Updating counter with time:', time);\r\n        const tiempoElement = document.getElementById('tiempo');\r\n        if (!tiempoElement) {\r\n            console.error(\"El elemento con el ID 'tiempo' no existe en el DOM\");\r\n            return;\r\n        }\r\n        const minutes = Math.floor(time / 60);\r\n        const seconds = time % 60;\r\n        const formatSeconds = seconds < 10 ? `0${seconds}` : seconds;\r\n        tiempoElement.textContent = `Tiempo: ${minutes < 10 ? `0${minutes}` : minutes}:${formatSeconds}`;\r\n    };\r\n\r\n    // Función para detener el contador\r\n    const stopCounter = () => {\r\n        if (intervalRef.current) {\r\n            clearInterval(intervalRef.current);\r\n            intervalRef.current = null;\r\n        }\r\n        setTime(60);\r\n        updateCounter(60);\r\n    };\r\n\r\n    // Función para manejar cómo se muestran los resultados\r\n    const showResult = (state) => {\r\n        const result = document.getElementById('resultado');\r\n        switch (state) {\r\n            // case 'inicio':\r\n            //     result.classList.remove('hidden');\r\n            //     result.textContent = '¡COMIENZA EL JUEGO!';\r\n            //     setLockBoard(false);\r\n            //     setTimeout(() => {\r\n            //         result.classList.add('hidden');\r\n            //     }, 1000);\r\n                // break;\r\n            case 'fin-bueno':\r\n                setLockBoard(true);\r\n                clearInterval(intervalRef.current);\r\n                result.classList.remove('hidden');\r\n                result.classList.add('animate');\r\n                result.textContent = '¡GANASTE!';\r\n                setTimeout(() => {\r\n                    result.classList.add('hidden');\r\n                    result.classList.remove('animate');\r\n                }, 1000);\r\n                break;\r\n            case 'fin-malo':\r\n                setLockBoard(true);\r\n                result.classList.remove('hidden');\r\n                result.classList.add('animate');\r\n                result.textContent = '¡PERDISTE!';\r\n                setTimeout(() => {\r\n                    result.classList.add('hidden');\r\n                    result.classList.remove('animate');\r\n                }, 1000);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n    // Función para añadir la animación a los resultados\r\n    const animationWin = () => {\r\n        const result = document.getElementById('resultado');\r\n        result.classList.add('animacionWin');\r\n    };\r\n\r\n    // Función que maneja lo que sucede al hacer click en una casilla\r\nconst handleCardClick = (e) => {\r\n    if (lockBoard || !gameStarted) return;\r\n\r\n    const card = e.currentTarget;\r\n    const cardImage = card.querySelector('img');\r\n\r\n    // Prevenir que se seleccione la misma carta o una que ya está emparejada\r\n    if (card === firstCard || card.classList.contains('matched')) return;\r\n    setTimeout(() => {\r\n    cardImage.classList.remove('hidden');\r\n    card.classList.add('flipped');\r\n}, 600); \r\n\r\n    if (!firstCard) {\r\n        setFirstCard(card); // Selecciona la primera carta\r\n    } else {\r\n        const secondCard = card;\r\n        setLockBoard(true); // Bloquea el tablero al seleccionar la segunda carta\r\n\r\n        if (firstCard.dataset.animal === secondCard.dataset.animal) {\r\n            // Si las cartas coinciden\r\n            firstCard.classList.add('matched');\r\n            secondCard.classList.add('matched');\r\n            setMatchedCards(prev => [...prev, firstCard, secondCard]);\r\n\r\n            resetCards();\r\n            setLockBoard(false); // Desbloquea el tablero después de encontrar un par\r\n\r\n            if (matchedCards.length + 2 === actualDifficulty) {\r\n                setTimeout(() => {\r\n                    showResult('fin-bueno');\r\n                    animationWin();\r\n                    setLockBoard(false);\r\n                }, 300);\r\n            }\r\n        } else {\r\n            // Si las cartas no coinciden, se ocultan\r\n            setTimeout(() => {\r\n                firstCard.classList.remove('flipped');\r\n                secondCard.classList.remove('flipped');\r\n                firstCard.querySelector('img').classList.add('hidden');\r\n                secondCard.querySelector('img').classList.add('hidden');\r\n                resetCards();\r\n                setLockBoard(false); // Desbloquea el tablero después de ocultar las cartas\r\n            }, 500); // Tiempo para que el jugador vea las dos cartas antes de ocultarlas\r\n        \r\n        }\r\n    }\r\n\r\n};\r\n\r\n    // Función para resetear las casillas a su posición original (no mostrar imágenes)\r\n    const resetCards = () => {\r\n        setFirstCard(null);\r\n        setLockBoard(false);\r\n    };\r\n    // Función para manejar los botones de dificultad\r\n    const handleDifficultyClick = (difficulty) => {\r\n        resetBoard(difficulty);\r\n        updateCounter(60);\r\n    };\r\n    // Función para manejar cómo se muestran las imágenes según la dificultad\r\n    const generateAnimalImages = (difficulty) => {\r\n        const pairs = animales.slice(0, Math.ceil(difficulty / 2));\r\n        const images = [...pairs, ...pairs.slice(0, difficulty - pairs.length)];\r\n        return shuffle(images);\r\n    };\r\n    // Función para resetear el tablero\r\n    const resetBoard = (difficulty) => {\r\n        stopCounter();\r\n        setactualDifficulty(difficulty);\r\n        setAnimalImages(generateAnimalImages(difficulty));\r\n        setLockBoard(true);\r\n        setGameStarted(false);\r\n        setMatchedCards([]);\r\n        document.getElementById('resultado').textContent = '';\r\n        document.getElementById('resultado').classList.add('hidden');\r\n\r\n        const cards = document.querySelectorAll('.card');\r\n        cards.forEach(card => {\r\n            card.classList.remove('flipped', 'matched');\r\n            const img = card.querySelector('img');\r\n            if (img) {\r\n                img.classList.add('hidden');\r\n            }\r\n        });\r\n    };\r\n    // Función para comenzar el juego\r\n    const startGame = () => {\r\n        console.log('Starting game...');\r\n        if (animalImages.length === 0) {\r\n            console.log('No animal images available.');\r\n            return;\r\n        }\r\n        console.log('Animal images available:', animalImages);\r\n        setGameStarted(true);\r\n        startCounter();\r\n        showResult('inicio');\r\n        setLockBoard(false);\r\n        resetCards();\r\n    };\r\n    // Función para cancelar el juego\r\n    const cancelGame = () => {\r\n        if (intervalRef) {\r\n            clearInterval(intervalRef);\r\n            setInterval(null);\r\n        }\r\n\r\n        setTime(60);\r\n        updateCounter(60);\r\n\r\n        setLockBoard(true);\r\n        setGameStarted(false);\r\n\r\n        const resultElement = document.getElementById('resultado');\r\n        if (resultElement) {\r\n            resultElement.textContent = '';\r\n            resultElement.classList.add('hidden');\r\n        }\r\n\r\n        resetCards();\r\n        resetBoard(actualDifficulty);\r\n    };\r\n    // Función para generar nuevas imágenes de animales según la dificultad\r\n    useEffect(() => {\r\n        setAnimalImages(generateAnimalImages(actualDifficulty));\r\n    }, [actualDifficulty]);\r\n\r\n    return (\r\n        <div className='memopudu'>\r\n            <h1 className='title'>Memopudú</h1>\r\n            <h3 id=\"tiempo\">Tiempo: 01:00</h3>\r\n            <h2 className='description'>¡Encuentra todos los pares antes de que pase 1 minuto!</h2>\r\n            <div className=\"controls\">\r\n                <button onClick={handleMusicButtonClick} ref={musicButtonRef}>\r\n                    Parar Sonido\r\n                </button>\r\n                <div className=\"difficulty-buttons\">\r\n                    <button onClick={() => handleDifficultyClick(12)}>Fácil</button>\r\n                    <button onClick={() => handleDifficultyClick(18)}>Medio</button>\r\n                    <button onClick={() => handleDifficultyClick(24)}>Difícil</button>\r\n                </div>\r\n                <button onClick={startGame} disabled={gameStarted}>Iniciar Juego</button>\r\n                <button onClick={cancelGame}>Cancelar Juego</button>\r\n            </div>\r\n            <div className={`board ${actualDifficulty === 12 ? 'easy' : actualDifficulty === 18 ? 'medium' : 'hard'}`} ref={tableroRef}>\r\n                {animalImages.map((animal, index) => (\r\n                    <div\r\n                        key={index}\r\n                        className={`card ${lockBoard ? 'lock' : ''}`}\r\n                        data-animal={animal}\r\n                        onClick={handleCardClick}\r\n                    >\r\n                        <div className=\"card-inner\">\r\n                            <div className=\"card-front\"></div>\r\n                            <div className=\"card-back\">\r\n                                <img src={animal} alt=\"animal\" />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div id=\"resultado\" className=\"hidden\"></div>\r\n            <audio ref={audioRef} src={musicGame} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Memopudu;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}